import groovy.json.JsonSlurper

apply from: "${project.rootDir}/gradle-tasks-for-libraries.gradle"

task copyHtml(type: Copy) {
    mustRunAfter tsc
    from "src"
    include "*.html"
    into "build/staging"
}

def props = new Properties()
file("${project.rootDir}/version.properties").withInputStream {
    props.load(it)
}

copyPackageJson {
    filter { line -> line.replaceAll('"version": "0.0.0"', '"version": "' + props.get("MODULE_VERSION") + '"')}
}

npmPack.dependsOn copyHtml

task installLocal(type: Exec) {
    dependsOn npmPack
    commandLine npmExecutable
    args "install", file("build/dist/mcma-node-red-contrib-mcma-${props.get("MODULE_VERSION")}.tgz").path
    workingDir "C:/apps/nodered"

    doLast {
        exec {
            commandLine "docker"
            args "stop", "nodered"
        }
        exec {
            commandLine "docker"
            args "start", "nodered"
        }
    }
}

task npmPublishLocal(type: Exec) {
    dependsOn ":verifyNodeJS"
    dependsOn tsc
    dependsOn copyPackageJson
    dependsOn copyHtml
    inputs.dir "build/staging"
    commandLine npmExecutable
    args "publish", "--access", "public", "--registry", "http://localhost:4873"
    workingDir "build/staging"
}

task npmPublish(type: Exec) {
    dependsOn ":verifyNodeJS"
    dependsOn tsc
    dependsOn copyPackageJson
    dependsOn copyHtml
    inputs.dir "build/staging"
    commandLine npmExecutable
    args "publish", "--access", "public", "--registry", "https://registry.npmjs.org"
    workingDir "build/staging"

    def jsonSlurper = new JsonSlurper()
    def packageJson = jsonSlurper.parse(file("package.json"))
    String packageName = packageJson.name + "@" + packageJson.version

    onlyIf {
        // check if package is already published
        def stdout = new ByteArrayOutputStream()
        def stderr = new ByteArrayOutputStream()
        try {
            exec {
                commandLine npmExecutable
                args "view", packageName, "--registry", "https://registry.npmjs.org"
                standardOutput stdout
                errorOutput stderr
            }
        } catch (ignored) {
        }

        return stdout.toString().trim().isEmpty()
    }
}
